from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.types import Message,CallbackQuery
from services.databases import register_users
router = Router()
class Registration(StatesGroup):
    email = State()
    username = State()
    password = State()
    confirm_password = State()


@router.callback_query(lambda callback: callback.data == 'register')
async def register_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.email)
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.message.edit_text(
        "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\nüìß–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",

        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )

@router.message(Registration.email)
async def procces_email(message: Message, state: FSMContext):
    if not '@' in message.text:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
    await state.set_state(Registration.username)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "username"
    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
    telegram_username = message.from_user.username
    if telegram_username:
        await state.update_data(username=telegram_username)
        await state.set_state(Registration.password)
        await message.answer(
            f"üîí –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à Telegram username: @{telegram_username}\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
    else:
        await state.set_state(Registration.username)
        await message.answer(
            "üîí –ú—ã –Ω–µ –Ω–∞—à–ª–∏ username –≤ –≤–∞—à–µ–º Telegram –ø—Ä–æ—Ñ–∏–ª–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ username:"
        )

@router.message(Registration.username)
async def procces_username(message: Message, state: FSMContext):
    if len(message.text) < 3:
        await message.answer("‚ùå Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(username=message.text)
    await state.set_state(Registration.password)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "password"
    await message.answer("üîí –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")

@router.message(Registration.password)
async def procces_password(message: Message, state: FSMContext):
    if len(message.text) < 8:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    await state.update_data(password=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
    await state.set_state(Registration.confirm_password)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "confirm_password"
    await message.answer("üîí –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@router.message(Registration.confirm_password)
async def procces_confirm_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    password_original = user_data.get('password')
    confirm_password = message.text
    if password_original != confirm_password:
        await message.answer("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:( –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")
        await state.set_state(Registration.password)
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑")
        return

    if register_users(user_data['email'],user_data['username'] ,user_data['password']):
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    await state.clear()